package main

func addGeneric[T int | float32 | float64](a T, b T) T {
	return a + b
}

func main() {
	a := 10
	b := 20

	c := addGeneric(a, b)
	println(c)
}

/*
Go 1.18版本引入了泛型特性，主要包括以下几个方面：

类型参数：类型参数是泛型函数或类型的一个占位符，表示一个未知的类型。
类型参数用方括号[]括起来，放在函数名或类型名之后。
例如，func MyFunc[T any](a T) {}中的T就是一个类型参数。

约束：约束是一种限制类型参数的方式，用于指定类型参数必须满足的条件。
约束可以是接口类型或其他具有类型参数的类型。
例如，func MyFunc[T io.Reader](a T) {}中的io.Reader就是一个约束，表示类型参数T必须实现io.Reader接口。

预定义约束：Go 1.18提供了一些预定义的约束，用于表示常见的类型集合。
例如，any约束表示任何类型，comparable约束表示可比较的类型（支持==和!=操作符）。

泛型函数：泛型函数是一种使用类型参数的函数，可以处理不同类型的参数。
泛型函数的定义和普通函数类似，只是在函数名后面添加了类型参数列表。
例如，func MyFunc[T any](a, b T) T {}。

泛型类型：泛型类型是一种使用类型参数的类型，可以表示不同类型的数据结构。
泛型类型的定义和普通类型类似，只是在类型名后面添加了类型参数列表。
例如，type MySlice[T any] []T。
*/
